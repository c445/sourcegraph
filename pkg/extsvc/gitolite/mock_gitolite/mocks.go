// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sourcegraph/sourcegraph/pkg/extsvc/gitolite (interfaces: ClientDeps)

// Package mock_gitolite is a generated GoMock package.
package mock_gitolite

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClientDeps is a mock of ClientDeps interface
type MockClientDeps struct {
	ctrl     *gomock.Controller
	recorder *MockClientDepsMockRecorder
}

// MockClientDepsMockRecorder is the mock recorder for MockClientDeps
type MockClientDepsMockRecorder struct {
	mock *MockClientDeps
}

// NewMockClientDeps creates a new mock instance
func NewMockClientDeps(ctrl *gomock.Controller) *MockClientDeps {
	mock := &MockClientDeps{ctrl: ctrl}
	mock.recorder = &MockClientDepsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientDeps) EXPECT() *MockClientDepsMockRecorder {
	return m.recorder
}

// CommandOutput mocks base method
func (m *MockClientDeps) CommandOutput(arg0 context.Context, arg1 string, arg2 ...string) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommandOutput", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommandOutput indicates an expected call of CommandOutput
func (mr *MockClientDepsMockRecorder) CommandOutput(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandOutput", reflect.TypeOf((*MockClientDeps)(nil).CommandOutput), varargs...)
}
